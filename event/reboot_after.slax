/*
    Author      : Ryan Barnes (barnesry@juniper.net)
    Date        : 9-May-2018

    Description : This script looks for a recent reboot/uptime within the past $seconds
                  and if the provided JunOS version matches the version we're running and
                  a lock file doesn't exist meaning we've already run at least once before,
                  we'll issue a reboot command to the unit.

                  This is to solve for occasional upgrades where remote connectivity is broken
                  immediately after the upgrade, and after $variable period of time the device
                  will auto-reboot.

                  Tested with srx100-h2 running 12.1X47-D45.4
    
    Version     : 0.1 - 9-May-2018
*/

version 1.0;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns ext = "http://xmlsoft.org/XSLT/namespace";

import "../import/junos.xsl";

/* this is imported into JunOS as a CLI option */
var $arguments = {
    <argument> {
        <name> "target_version";
        <description> "specific version we want to match to trigger a reboot";
    }
}
param $target_version;

/* global variables */
param $lockfile = '/var/tmp/reboot_after.lock';
param $reboot_limit = 500;
param $script_name = "reboot_after.slax";

match / {
    <event-script-results> {

        /* parses 12.1X47-D45.4 out of JUNOS Software Release [12.1X47-D45.4] */
        var $version_regex = "\\[(.*)\\]";


        /* check for lock file which indicates we've already run once */
        var $fileget = {
            <file-get> {
                <filename>$lockfile;
                <encoding>'ascii';
            }
        }
        var $file_exists = jcs:invoke($fileget);
        /* This Week : Mastering Junos Automation Page 62 for error match explanation */
        /* if we don't find a lock file, we'll continue on */
        if ($file_exists//self::xnm:error) {

            /* set up rpc call to check system uptime */
            var $uptime_rpc = { 
                <get-system-uptime-information>; 
            }
            var $uptime = jcs:invoke( $uptime_rpc );
            var $current_date = $uptime/current-time/date-time;
            var $protocols_start = $uptime/protocols-started-time/time-length/@junos:seconds;
            /* copy-of $uptime; */
            expr jcs:output("protocols-started : ", $protocols_start, "sec");

            /* set up rpc call to check version */
            var $version_rpc = {
                <get-software-information>;
            }
            var $version = jcs:invoke( $version_rpc );

            /* copy-of $version; */
            var $version_short = jcs:regex($version_regex, $version/package-information/comment);
            /* entire regex match : debug */
            /* expr jcs:output("version : ", $version_short[1]); */
            expr jcs:output("version : ", $version_short[2]);

            /* check if the version we're running is the version we want to trigger a reboot for */
            if( $version_short[2] == $target_version ) {
                /* expr jcs:output($version_short[2], " matches ", $target_version); */
                <output> "CHECK PASS : Version : " _ $version_short[2] _ " matches target " _ $target_version;

                /* check if we've rebooted within the last $reboot_limit seconds */
                if ( $protocols_start < $reboot_limit ) {
                    /* expr jcs:output("Device rebooted within the last ", $protocols_start, "seconds."); */
                    <output> "CHECK PASS : device_uptime=" _ $protocols_start _ "sec < " _ $reboot_limit _ "sec";

                    /* write lock file to prevent future execution */
                    call write_lock_file($lockfile, $current_date);
                    <output> "Setting lock file " _ $lockfile; 

                    /* and....reboot */
                    /* lock file doesn't exist && rebooted in the last $reboot_limit seconds && and version matches */
                    var $reboot_rpc = { 
                        <request-reboot>; 
                    };
                    var $reboot_msg = "ALL CHECKS PASSED : Requesting Reboot...";
                    call write_syslog_and_output_tree($message=$reboot_msg);
                    
                    var $reboot_result = jcs:invoke( $reboot_rpc );
                    if ( $reboot_result//self::xnm:error ) {
                        <output> "Reboot Request Failed!";
                        copy-of $reboot_result;
                    }
                    
                }
                else {
                    var $uptime_fail_msg = "CHECK FAIL : Device Uptime " _ $protocols_start _ "sec greater than reboot limit " _ $reboot_limit _ "sec. EXITING!!!";
                    /* don't really want to write this to syslog or anything for each failure */
                    <output> $uptime_fail_msg;
                }
            }
            else {
                var $version_fail_msg = "CHECK FAIL : " _ $version_short[2] _ " doesn't match " _ $target_version _ ". EXITING!!!";
                /* don't really want to write this to syslog or anything for each failure */
                <output> $version_fail_msg;
            } 
        }
        else {
            var $exit_msg = "Lock file " _ $lockfile _ " exists meaning we've already run once! EXITING!!!";
            /* don't really want to write this to syslog or anything for each failure */
            <output> $exit_msg;
        }        
    }
}

template write_lock_file($lockfile, $current_date) {
    var $fileput = {
        <file-put> {
            <filename>$lockfile;
            <encoding>'ascii';
            <permission>'0644';
            <delete-if-exist>;
            <file-contents>$current_date;
        }
    }
    var $local_file_out = jcs:invoke($fileput);
    expr jcs:output("Saving lock file : ", $lockfile);
}

template write_syslog($message) {
    expr jcs:syslog("external.warn", $script_name, $message);
}

template write_syslog_and_output_tree($message) {
    call write_syslog($message);
    <output> $message;
}