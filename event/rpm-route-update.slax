 /*
		* This script watches for events from RPM (PING) and triggers static routes
		* to go inactive removing them from the multipath default route
		*
    * Written: barnesry@
		* Date: 13-Mar-2016
		*
    * Manual Trigger : logger -e PING_TEST_FAILED -d daemon -a test-owner=ISP2 -a test-name=icmp-loss

			root@SRX100-H2_Branch_1> show configuration routing-options static
			inactive: route 10.255.255.1/32 next-hop 2.2.2.6;   <---- removed from multipath group
			route 10.255.255.2/32 next-hop 2.2.2.2;
			inactive: route 10.255.255.3/32 next-hop 2.2.2.6;   <---- removed from multipath group
			route 10.255.255.4/32 next-hop 2.2.2.10;
			route 10.255.255.5/32 next-hop 2.2.2.2;
			route 0.0.0.0/0 {
			    next-hop [ 10.255.255.1 10.255.255.2 10.255.255.3 10.255.255.4 10.255.255.5 ];
			    resolve;
		}

 */



version 1.0;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns date = "http://exslt.org/dates-and-times";
ns my = "http://xml.juniper.net/myfunctions";

import "../import/junos.xsl";

/* Globals */
var $connection = jcs:open();
var $start-time = date:date-time();

/* test-name */
var $rpm-probe-owner = "ISP2";
var $rpm-probe-test = "icmp-loss";

/* Defaults and Settings */
var $script-name = "rpm-route-update";

/* MIB Variables */
var $owner-instance = "ISP2";
var $owner-oid = "jnxUtilStringValue.I.S.P.2";


var $event-definition = {
	<event-options> {
		<policy> {
				<name> "rpm-update-default-route";
				<events> "ping_test_failed";
				<then> {
						<event-script> {
								<name> "rpm-route-update.slax";
								<output-filename> "rpm-route-update.log";
								<destination> {
										<name> "local";
								}
								<output-format> "text";
						}
				}
		}
	}
	/* These policies block the logging of the commands run by root; otherwise
   * the syslog will fill up with multiple logs every three seconds
   */
  <policy> {
      <name> "block_snmp_command_logging";
      <events> "UI_JUNOSCRIPT_CMD";
      <attributes-match> {
          <from-event-attribute> "UI_JUNOSCRIPT_CMD.username";
          <condition> "matches";
          <to-event-attribute-value> "^root$";
      }
      <attributes-match> {
          <from-event-attribute> "UI_JUNOSCRIPT_CMD.command";
          <condition> "matches";
          <to-event-attribute-value> "^get-snmp-object";
      }
      <then> {
          <ignore>;
      }
  }
  <policy> {
      <name> "block_rpm_command_logging";
      <events> "UI_JUNOSCRIPT_CMD";
      <attributes-match> {
          <from-event-attribute> "UI_JUNOSCRIPT_CMD.username";
          <condition> "matches";
          <to-event-attribute-value> "^root$";
      }
      <attributes-match> {
          <from-event-attribute> "UI_JUNOSCRIPT_CMD.command";
          <condition> "matches";
          <to-event-attribute-value> "^get-probe-results";
      }
      <then> {
          <ignore>;
      }
  }
  <policy> {
      <name> "block_utility_mib_command_logging";
      <events> "UI_JUNOSCRIPT_CMD";
      <attributes-match> {
          <from-event-attribute> "UI_JUNOSCRIPT_CMD.username";
          <condition> "matches";
          <to-event-attribute-value> "^root$";
      }
      <attributes-match> {
          <from-event-attribute> "UI_JUNOSCRIPT_CMD.command";
          <condition> "matches";
          <to-event-attribute-value> "^((request-snmp-utility-mib-clear)|(request-snmp-utility-mib-set))";
      }
      <then> {
          <ignore>;
      }
  }
  <policy> {
      <name> "block_get_configuration_command_logging";
      <events> "UI_JUNOSCRIPT_CMD";
      <attributes-match> {
          <from-event-attribute> "UI_JUNOSCRIPT_CMD.username";
          <condition> "matches";
          <to-event-attribute-value> "^root$";
      }
      <attributes-match> {
          <from-event-attribute> "UI_JUNOSCRIPT_CMD.command";
          <condition> "matches";
          <to-event-attribute-value> "^get-configuration";
      }
      <then> {
          <ignore>;
      }
  }
}

/* Set to true() if you want to see debug trace messages. Set to false() otherwise */
var $debug = false();

match / {
	<event-script-results> {

			/* This copies the entire XML contents of <event-script-input> into the
       * result tree as a child element of <event-script-results>. This will
       * allow the trigger to dump events to match on in XML format in the
       * output log. Configure a local output destination in your event-options
       * to see output in xml format */

			/* copy-of event-script-input; */

			/* Report debug mode in case it was left in place accidentally */
	    if( $debug ) {
	        expr jcs:syslog( "daemon.notice", $script-name, " is running in debug mode" );
	    }

	    /* Dampen to only once per minute in case scripts get executed too close together */
	    if( not( jcs:dampen( "rpm-route-update", 1, 1 ) ) ) {
	        expr jcs:syslog( "daemon.notice", "Rate-limiting start of ", $script-name );
	        <xsl:message terminate="yes"> "Rate-limiting start of " _ $script-name;
	    }

      /* Get the test owner from the input-tree */
      var $test-owner = event-script-input/trigger-event/attribute-list/attribute[name=="test-owner"]/value;

      /* Get the test name from the input-tree */
      var $test-name = event-script-input/trigger-event/attribute-list/attribute[name=="test-name"]/value;

      /*  DEBUG ONLY
      var $syslog-output = "Test : " _ $test-owner _ " || TestName: " _ $test-name;
      expr jcs:syslog( "external.warning", $syslog-output );
      */



      /*	Set up our RPC call to grab the RPM config */
  		var $get-rpm-rpc = <get-configuration> {
  				<configuration> {
  						<services> {
  								<rpm>;
  						}
  				}
  		}

  		/* Then we'll make the call to grab this section of the config */
  		var $rpm-config = jcs:invoke( $get-rpm-rpc );


      /* Let's pull the NH from the $test_owner */
      var $test-nh = $rpm-config/services/rpm/probe[name == $test-owner]/test[name == $test-name]/next-hop;


      var $syslog-output = "TestOwner : " _ $test-owner _ " TestName : " _ $test-name _ " NextHop : " _ $test-nh;
      expr jcs:syslog("external.warning", $syslog-output);


      /* Now we need to enumerate static routes for the failed NH and deactivate them */

      /*	Set up our RPC call to grab the routes */
  		var $get-static-routes-rpc = <get-configuration> {
  				<configuration> {
  						<routing-options> {
  								<static>;
  						}
  				}
  		}

      /* Then we'll make the call to grab this section of the config */
  		var $static-routes-config = jcs:invoke( $get-static-routes-rpc );

      /* Build an XML fragment of static routes w/ next-hops of our Probe from the config */
      var $interesting-routes = { call enumerate-interesting-routes($static-routes-config,$test-nh); }


      /* Are they already deactivated? If so - we'll complain and exit */
			var $nh-inactive-route-count = count($static-routes-config/routing-options/static/route[next-hop == $test-nh and @inactive == "inactive"]);
			var $nh-total-route-count = count($static-routes-config/routing-options/static/route[next-hop == $test-nh]);

			if ( $nh-inactive-route-count == $nh-total-route-count ) {
				/* we've already deactivated the routes, so we don't need to commit the config again */
				var $message = "Routes already inactive. No re-commit required. Inactive Routes : " _ $nh-inactive-route-count _ " Total Routes : " _ $nh-total-route-count;
				<xsl:message terminate="yes"> $message;
			}
			else {
				/* we'll need to commit the config */
				/* <xsl:message terminate="yes"> "We'd commit the config here."; */

					/* we'll store our results from the commit in the $result variable */
		      var $results := {

		        var $configuration = {
		          <configuration> {
		            <routing-options> {
		              <static> {

		                  /* Now we need a list of the routes with the NH that just died */
		                  for-each ( $static-routes-config/routing-options/static/route[next-hop == $test-nh] ) {
		                    <route inactive="inactive"> {
		                      <junos:comment> "Changed by " _ $script-name;
													<name> name;
		                    }
		                  }
		                }
		              }
		            }
		        }
		        copy-of $configuration;

		        /* Announce we're making a change to the config */
		        expr jcs:syslog("user.warning", "De-activating NH routes associated with failed RPM probe.");

		        /* Open a connection, load config, and close */
		        /* All results are written to the result tree and will be set as the value of the $results variable */
		        var $connection = jcs:open();
		        call jcs:load-configuration( $connection, $configuration, $action = "replace" );
		        copy-of jcs:close( $connection );


		      }
		      copy-of $results;
				}
  	}
  }



template check-inactive($static-routes-config, $test-nh) {

		var $route-count = count($static-routes-config/routing-options/static/route[next-hop == $test-nh and @inactive == "inactive"]);

    /* Did we already inactivate these routes? If we did, no need to commit again.*/
    for-each ( $static-routes-config/routing-options/static/route[next-hop == $test-nh] ) {

			if ( current()/@inactive == "inactive") {
				copy-of current();
			}
			<output> "Configuration Applied";
			copy-of $route-count;
		}

      /* <xsl:message terminate="yes"> "Routes already inactive. Not re-applying configuration."; */
}

template enumerate-interesting-routes($static-routes-config,$test-nh) {
  /* Builds an XML frag containing static routes matching the next-hop
   * of the failed probe. e.g. This will return the following;
   * <routes>
   *  <name>10.255.255.1/32</name>
   *  <name>10.255.255.3/32</name>
  */

  <routes> {
    for-each ( $static-routes-config/routing-options/static/route[next-hop == $test-nh] ) {
      <name> name;
    }
  }
}
