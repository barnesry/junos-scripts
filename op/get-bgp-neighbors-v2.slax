/*
 *  get_bgp_summary.slax
 *
 *  Created by Ryan Barnes (barnesry@amazon.com) on 20140420.
 *
 *  Version History
 *  ===============
 *  v0.1    Initial Release (barnesry@)
 *          Supports IPv4 inet.0 RIB values, sorting of columns
 *  v0.2    Updated to support reporting of peer-group available in 17.4 output
            rather than having to pull from config directly
 *
 * barnesry@vSRX-1> op get-bgp-neighbors
 * Peer            ASN   Group                Description               Flaps Rcvd/Acpt/Adv         Last Up/Down State
 * 10.0.0.2        65002 EBGP                                           8     7/7/7                   5d 9:55:46 Established
 */

version 1.0;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";

import "../import/junos.xsl";

/* This is imported into JUNOS as a CLI option */
var $arguments = {
    <argument> {
        <name> "sortby";
        <description> "Field to sort output by [description|flaps|state|updown|group] (optional)";
    }
}
param $neighbor_ip;
param $sortby;


/* not used specifically in this script, but sometimes useful */
template convert_bps($bps) {
    if ( ($bps >= 1000) && ($bps <= 1000000) ) {
        expr (round($bps div 1000)) _ "Kbps";
    }
    else if (  ($bps > 1000000) && ($bps <= 1000000000) ) {
        expr (round($bps div 1000000)) _ "Mbps";
    }
    else if ($bps > 1000000000)  {
        expr (round($bps div 1000000000)) _ "Gbps";
    }
    else if ( ($bps < 1000) ) {
        expr round($bps) _ "bps";
    }
}


match / {
  <op-script-results> {

    /* Send JUNOS XML API Element via jcs:invoke */
    var $results1 = jcs:invoke( "get-bgp-neighbor-information" );

    /* Send JUNOS XML API Element via jcs:invoke */
    var $results2 = jcs:invoke("get-bgp-summary-information");


    /* Parse our peerIP+port into an IP only (need to confirm ipv6 matching as well) */
    /* var $peer-regex = "^([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)";  V4 only... */
    var $peer-regex = "^([0-9\.\:]+)\+";


    var $peer-table := {
      for-each ( $results1/bgp-peer ) {

      /* Need to strip the port off the peer-address */
      var $regex-result = jcs:regex($peer-regex, peer-address);
      var $peer-ip = $regex-result[2];

      /* slax 1.0 doesn't support terniary assignment..so here we are :-( */
      var $received-routes = {
	      if (bgp-rib [name='inet.0']/received-prefix-count) {
	        expr bgp-rib [name='inet.0']/received-prefix-count;
        } else {
	        expr 0;
        }
      }

      var $accepted-routes = {
        if (bgp-rib [name='inet.0']/accepted-prefix-count) {
          expr bgp-rib [name='inet.0']/accepted-prefix-count;
        } else {
          expr 0;
        }
      }

      var $advertised-routes = {
        if (bgp-rib [name='inet.0']/advertised-prefix-count) {
          expr bgp-rib [name='inet.0']/advertised-prefix-count;
        } else {
          expr 0;
        }
      }

        <bgp-peer> {
          <peer-address> $peer-ip;
          <description> description;
          <peer-group> peer-group;
          <peer-as> peer-as;
          <received-routes> $received-routes;
          <accepted-routes> $accepted-routes;
          <advertised-routes> $advertised-routes;
          /* <received-routes> (bgp-rib [name='inet.0']/received-prefix-count) ? bgp-rib [name='inet.0']/received-prefix-count : 0; */
          /* <accepted-routes> (bgp-rib [name='inet.0']/accepted-prefix-count) ? bgp-rib [name='inet.0']/accepted-prefix-count : 0; */
          /* <advertised-routes> (bgp-rib [name='inet.0']/advertised-prefix-count) ? bgp-rib [name='inet.0']/advertised-prefix-count : 0; */
          <flap-count> flap-count;
          <elapsed-time> $results2/bgp-peer [peer-address=$peer-ip]/elapsed-time;
          <elapsed-time-seconds> $results2/bgp-peer [peer-address=$peer-ip]/elapsed-time/@junos:seconds;
          <peer-state> peer-state;
        }
      }
    }

    /* Print our Headers */
    <output> jcs:printf("%-15s %-5s %-20.20s %-25s %-5s %-21s %-12s %-15s","Peer","ASN","Peer-Group","Description","Flaps","Rcvd/Acpt/Adv","Last Up/Down","State" );

    /* Check if we wanted to sort the table before we print it out */
    if( not ( jcs:empty ( $sortby ) ) ) {

      if ( $sortby == 'flaps' ) {
        for-each ( $peer-table/bgp-peer ) {
          <xsl:sort select="flap-count" order="descending" data-type="number">;
          <output> jcs:printf("%-15.15s %-5.5s %-20.20s %-25.25s %-5.5s %-21.21s %12.12s %-15.15s", peer-address, peer-as, peer-group, description, flap-count, concat(received-routes,"/",accepted-routes,"/",advertised-routes), elapsed-time, peer-state );
        }
      } else if ( $sortby == 'state' ) {
        for-each ( $peer-table/bgp-peer ) {
          <xsl:sort select="peer-state" order="ascending">;
          <output> jcs:printf("%-15.15s %-5.5s %-20.20s %-25.25s %-5.5s %-21.21s %12.12s %-15.15s", peer-address, peer-as, peer-group, description, flap-count, concat(received-routes,"/",accepted-routes,"/",advertised-routes), elapsed-time, peer-state );
        }
      } else if ( $sortby == 'description' ) {
        for-each ( $peer-table/bgp-peer ) {
          <xsl:sort select="description" order="ascending">;
          <output> jcs:printf("%-15.15s %-5.5s %-20.20s %-25.25s %-5.5s %-21.21s %12.12s %-15.15s", peer-address, peer-as, peer-group, description, flap-count, concat(received-routes,"/",accepted-routes,"/",advertised-routes), elapsed-time, peer-state );
        }
      } else if ( $sortby == 'updown' ) {
        for-each ( $peer-table/bgp-peer ) {
          <xsl:sort select="elapsed-time-seconds" order="descending" data-type="number">;
          <output> jcs:printf("%-15.15s %-5.5s %-20.20s %-25.25s %-5.5s %-21.21s %12.12s %-15.15s", peer-address, peer-as, peer-group, description, flap-count, concat(received-routes,"/",accepted-routes,"/",advertised-routes), elapsed-time, peer-state );
        }
      } else if ( $sortby == 'group' ) {
        for-each ( $peer-table/bgp-peer ) {
          <xsl:sort select="group" order="ascending">;
          <output> jcs:printf("%-15.15s %-5.5s %-20.20s %-25.25s %-5.5s %-21.21s %12.12s %-15.15s", peer-address, peer-as, peer-group, description, flap-count, concat(received-routes,"/",accepted-routes,"/",advertised-routes), elapsed-time, peer-state );
        }
      }
    }
    else {
      for-each ( $peer-table/bgp-peer ) {
        <output> jcs:printf("%-15.15s %-5.5s %-20.20s %-25.25s %-5.5s %-21.21s %12.12s %-15.15s", peer-address, peer-as, peer-group, description, flap-count, concat(received-routes,"/",accepted-routes,"/",advertised-routes), elapsed-time, peer-state );
      }
    }

  }
}
