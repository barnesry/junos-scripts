/*
 *  get_bgp_summary.slax
 *
 *  Created by Ryan Barnes (barnesry@amazon.com) on 20140420.
 *
 *  Version History
 *  ===============
 *  v0.1    Initial Release (barnesry@)
 *          Supports IPv4 inet.0 RIB values, sorting of columns
 *  v0.2    Updated to support reporting of peer-group available in 17.4 output
            rather than having to pull from config directly
    v0.3    Updates to improve peers with multiple-address families (barnesry@ 5/15/2024)
 *
 * user@router> op get_bgp_summary
 * Peer                      ASN   Peer-Group           Description               Flaps Table      Rcvd/Acpt/Adv         Last Up/Down State
 * 3.142.223.1               174   transit_v4           Cogent IPv4 AS174         0     inet.0     931462/266121/4            7:08:05 Established
 * 52.155.55.1               4689  peers_v4             Twitch AS46489            11    inet.0     9/9/4                 10w5d 15:33: Established                                          8     7/7/7                   5d 9:55:46 Established
 */

version 1.0;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";

import "../import/junos.xsl";

/* This is imported into JUNOS as a CLI option */
var $arguments = {
    <argument> {
        <name> "sortby";
        <description> "Field to sort output by [description|flaps|state|updown|group] (optional)";
    }
}
param $neighbor_ip;
param $sortby;


/* not used specifically in this script, but sometimes useful */
template convert_bps($bps) {
    if ( ($bps >= 1000) && ($bps <= 1000000) ) {
        expr (round($bps div 1000)) _ "Kbps";
    }
    else if (  ($bps > 1000000) && ($bps <= 1000000000) ) {
        expr (round($bps div 1000000)) _ "Mbps";
    }
    else if ($bps > 1000000000)  {
        expr (round($bps div 1000000000)) _ "Gbps";
    }
    else if ( ($bps < 1000) ) {
        expr round($bps) _ "bps";
    }
}


match / {
  <op-script-results> {

    /* Send JUNOS XML API Element via jcs:invoke */
    var $results1 = jcs:invoke( "get-bgp-neighbor-information" );

    /* Send JUNOS XML API Element via jcs:invoke */
    var $results2 = jcs:invoke("get-bgp-summary-information");


    /* Parse our peerIP+port into an IP only (need to confirm ipv6 matching as well) */
    /* var $peer-regex = "^([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)";  V4 only... */
    var $peer-regex = "^([0-9a-z\.\:]+)\+";


    var $peer-table := {
      for-each ( $results1/bgp-peer ) {

      /* Need to strip the port off the peer-address */
      var $regex-result = jcs:regex($peer-regex, peer-address);
      var $peer-ip = $regex-result[2];

      /* build a separate line item for every address-family per peer */
      for-each ( bgp-rib ) {

        var $table-name = name;

        /* slax 1.0 doesn't support terniary assignment..so here we are :-( */
        var $received-routes = {
          if ( received-prefix-count) {
            expr received-prefix-count;
          } else {
            expr 0;
          }
        }

        var $accepted-routes = {
          if (accepted-prefix-count) {
            expr accepted-prefix-count;
          } else {
            expr 0;
          }
        }

        var $advertised-routes = {
          if (advertised-prefix-count) {
            expr advertised-prefix-count;
          } else {
            expr 0;
          }
        }

          <bgp-peer> {
            <peer-address> $peer-ip;
            <description> ./parent::node()/description;
            <peer-group> ./parent::node()/peer-group;
            <peer-as> ./parent::node()/peer-as;
            <table-name> $table-name;
            <received-routes> $received-routes;
            <accepted-routes> $accepted-routes;
            <advertised-routes> $advertised-routes;
            /* <received-routes> (bgp-rib [name='inet.0']/received-prefix-count) ? bgp-rib [name='inet.0']/received-prefix-count : 0; */
            /* <accepted-routes> (bgp-rib [name='inet.0']/accepted-prefix-count) ? bgp-rib [name='inet.0']/accepted-prefix-count : 0; */
            /* <advertised-routes> (bgp-rib [name='inet.0']/advertised-prefix-count) ? bgp-rib [name='inet.0']/advertised-prefix-count : 0; */
            <flap-count> ./parent::node()/flap-count;
            <elapsed-time> $results2/bgp-peer [peer-address=$peer-ip]/elapsed-time;
            <elapsed-time-seconds> $results2/bgp-peer [peer-address=$peer-ip]/elapsed-time/@junos:seconds;
            <peer-state> ./parent::node()/peer-state;
          }
        }
      }
    }

    /* Print our Headers */
    <output> jcs:printf("%-25.20s %-5s %-20.20s %-25s %-5s %-10s %-21s %-12s %-15s","Peer","ASN","Peer-Group","Description","Flaps","Table","Rcvd/Acpt/Adv","Last Up/Down","State" );

    /* Check if we wanted to sort the table before we print it out */
    if( not ( jcs:empty ( $sortby ) ) ) {

      if ( $sortby == 'flaps' ) {
        for-each ( $peer-table/bgp-peer ) {
          <xsl:sort select="flap-count" order="descending" data-type="number">;
          <output> jcs:printf("%-25.25s %-5.5s %-20.20s %-25.25s %-5.5s %-10.10s %-21.21s %12.12s %-15.15s", peer-address, peer-as, peer-group, description, flap-count, table-name, concat(received-routes,"/",accepted-routes,"/",advertised-routes), elapsed-time, peer-state );
        }
      } else if ( $sortby == 'state' ) {
        for-each ( $peer-table/bgp-peer ) {
          <xsl:sort select="peer-state" order="ascending">;
          <output> jcs:printf("%-25.25s %-5.5s %-20.20s %-25.25s %-5.5s %-10s %-21.21s %12.12s %-15.15s", peer-address, peer-as, peer-group, description, flap-count, table-name, concat(received-routes,"/",accepted-routes,"/",advertised-routes), elapsed-time, peer-state );
        }
      } else if ( $sortby == 'description' ) {
        for-each ( $peer-table/bgp-peer ) {
          <xsl:sort select="description" order="ascending">;
          <output> jcs:printf("%-25.25s %-5.5s %-20.20s %-25.25s %-5.5s %-10s %-21.21s %12.12s %-15.15s", peer-address, peer-as, peer-group, description, flap-count, table-name, concat(received-routes,"/",accepted-routes,"/",advertised-routes), elapsed-time, peer-state );
        }
      } else if ( $sortby == 'updown' ) {
        for-each ( $peer-table/bgp-peer ) {
          <xsl:sort select="elapsed-time-seconds" order="descending" data-type="number">;
          <output> jcs:printf("%-25.25s %-5.5s %-20.20s %-25.25s %-5.5s %-10s %-21.21s %12.12s %-15.15s", peer-address, peer-as, peer-group, description, flap-count, table-name, concat(received-routes,"/",accepted-routes,"/",advertised-routes), elapsed-time, peer-state );
        }
      } else if ( $sortby == 'group' ) {
        for-each ( $peer-table/bgp-peer ) {
          <xsl:sort select="group" order="ascending">;
          <output> jcs:printf("%-25.25s %-5.5s %-20.20s %-25.25s %-5.5s %-10s %-21.21s %12.12s %-15.15s", peer-address, peer-as, peer-group, description, flap-count, table-name, concat(received-routes,"/",accepted-routes,"/",advertised-routes), elapsed-time, peer-state );
        }
      }
    }
    else {
      for-each ( $peer-table/bgp-peer ) {
        <output> jcs:printf("%-25.25s %-5.5s %-20.20s %-25.25s %-5.5s %-10s %-21.21s %12.12s %-15.15s", peer-address, peer-as, peer-group, description, flap-count, table-name, concat(received-routes,"/",accepted-routes,"/",advertised-routes), elapsed-time, peer-state );
      }
    }

  }
}