/* Author : Ryan Barnes (barnesry@juniper.net)
 * Date   : 6-July-2017
 *
 * Copyright 2017 Juniper Networks, Inc. All rights reserved.
 * Licensed under the Juniper Networks Script Software License (the "License"). 
 * You may not use this script file except in compliance with the License, which is located at 
 * http://www.juniper.net/support/legal/scriptlicense/
 * Unless required by applicable law or otherwise agreed to in writing by the parties, software 
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
 * OF ANY KIND, either express or implied.
 *
*/

version 1.1;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns ext = "http://xmlsoft.org/XSLT/namespace";
ns str = "http://exslt.org/strings";
/* You need include this ns to use set:distinct() */
ns set = "http://exslt.org/sets";
/* unique namespace used for PID checks function */
ns jutils = "http://jutils/";

import "../import/junos.xsl";



/* keep an open a control connection for duration of this script  */
/* GLOBAL Scope */
var $connection = jcs:open();

match / {

    <op-script-results> {

        /* Interface Regex for parsing */
        var $int-regex = "[xge][et]-([0-9])/([0-9])/([0-9])";

        call get_ifd($connection,$int-regex);

        call get_pipe_map($connection);
        
        

        /* call get_qsfp_list($connection); */
              
    
        expr jcs:close($connection);
    }
}


template get_qsfp_list($connection) {
    var $rpc = {
        <request-shell-execute> {
            <command> 'cprod -A fpc0 -c "show qsfp list"';
        }
    }
    var $result = jcs:execute($connection,$rpc);
    copy-of $result;
}

/* IFD to Physical Port */
template get_ifd($connection,$int-regex) {
    var $rpc = {
        <request-shell-execute> {
            <command> 'cprod -A fpc0 -c "show dcbcm ifd all"';
        }
    }
    var $result = jcs:execute($connection,$rpc);
    
    var $ifd := {
        for-each ( jcs:split("\n",$result) ) {
        
            if ( jcs:regex($int-regex, .) ) {
                <interface> {    
                    var $line = .;
                    var $result1 = jcs:split("[ ]+",$line);
                    <ifd-name> $result1[2];
                    <port-name> $result1[6];
                }
            }
        }
    }
    <output> jcs:printf("%-10.10s %-10.10s","ifd", "bcrm_port");
    <output> str:padding( 20 , "-" );
    for-each ( $ifd/interface ) {
        var $name = ifd-name;
        var $port = port-name;
        <output> jcs:printf("%-10.10s %-10.10s",$name,$port); 
    }
    expr $ifd;
}

template get_pipe_map($connection) {
    var $rpc = {
        <request-shell-execute> {
            <command> "cprod -A fpc0 -c 'set dcbcm bc \"show pmap\"'";
        }
    }
    var $result = jcs:execute($connection,$rpc);
    copy-of $result;
    expr $result;
}

function bcrm:get_pipe_map( $connection ) {
    var $rpc = {
        <request-shell-execute> {
            <command> "cprod -A fpc0 -c 'set dcbcm bc \"show pmap\"'";
        }
    }
    var $pipe_map = jcs:execute($connection,$rpc);
    
    result $pipe_map;
}