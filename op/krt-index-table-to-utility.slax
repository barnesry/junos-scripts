/* Author : Ryan Barnes (barnesry@juniper.net)
 * Date   : 15-March-2017
 *
 * Supplimental table to support cross reference of jnxBgpM2PeerRoutingInstance MIB
 * which outputs a BGP peer providing a 'routing-instance' index reference which was never
 * implemented in production MIBs. 
 * 
 * output allows for direct query using base OID krtTableInstance + ASCII convertion of index_num [52.48.55.55]
 * ascii52 = 4, ascii48 = 0, ascii55 = 7, ascii55 = 7
 * jnxUtilStringValue."krtTableInstance4077" = customer_vrf_4077
 * jnxUtilStringValue.107.114.116.84.97.98.108.101.73.110.115.116.97.110.99.101.52.48.55.55 = customer_vrf_4077
 *
 * Features TBD
 * & cleanup of inserted entries for VRF deletes (does this matter since there wouldn't be a BGP peer to relate to?) 
 *      Does not appear to be supported for string type per:
 *      https://www.juniper.net/documentation/en_US/junos/topics/reference/command-summary/request-snmp-utility-mib-clear-instance.html
 * & improved efficiency before MIB insertion (only unique keys) and 1.1 mutable variables
 *      Complete : using set:distinct to avoid multiple MIB inserts for duplicate keys
 * & run as commit / event / op script depending on need. Seems to make the most sense on commit.
 *
*/

version 1.1;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns ext = "http://xmlsoft.org/XSLT/namespace";

/* You need include this ns to use set:distinct() */
ns set = "http://exslt.org/sets";


import "../import/junos.xsl";
match / {
    <op-script-results> {
    var $command="get-krt-tables-information";
    var $krt = jcs:invoke($command);

    /* if response is empty then exit and terminate */
    if (jcs:empty($krt)) {
            <xsl:message terminate="yes"> "Failure to read krt tables";
    }

    /* krt has multiple tables for a given routing-instance */
    /* we only want to set this once so we'll filter unique keys */
    var $index = set:distinct($krt/krt-table/krt-table-index);

    /* build RTF of unique table/index values */
    var $hash := {
        <krt-tables> {
            for-each ($index) {
                /* split vrfname.inet.0 and only take the first part ref to routing-instance */
                /* discard inet.0, inet.1 and whatnot since it's not interesting */
                /* need to set current node to variable to use in xpath selection later */
                var $i = .;

                var $krt-table-name = jcs:split("\\.", $krt/krt-table[krt-table-index[text()=$i]]/krt-table-name);
                var $krt-table-index = $krt/krt-table/krt-table-index[text()=$i];
                <krt-table> {
                    <index> $krt-table-index;
                    <table-name> $krt-table-name; 
                }
            }
        }
    }
    copy-of $hash; /* use | display xml to see this in op script output for debug */

    /* set some snmp variables */
    for-each ($hash/krt-tables/krt-table) {
        call snmp_set($instance = "krtTableInstance" _ index, $value = table-name);
    }
  }
}
template snmp_set($instance, $value = "0", $type = "string" ) {

    var $set_rpc = <request-snmp-utility-mib-set> {
        <object-type> $type;
        <object-value> $value;
        <instance> $instance;
    }
    var $out = jcs:invoke($set_rpc);
}