/* Author : Ryan Barnes (barnesry@juniper.net)
 * Date   : 15-March-2017
 *
 * Copyright 2017 Juniper Networks, Inc. All rights reserved.
 * Licensed under the Juniper Networks Script Software License (the "License"). 
 * You may not use this script file except in compliance with the License, which is located at 
 * http://www.juniper.net/support/legal/scriptlicense/
 * Unless required by applicable law or otherwise agreed to in writing by the parties, software 
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
 * OF ANY KIND, either express or implied.
 *
 * Supplimental table to support cross reference of jnxBgpM2PeerRoutingInstance MIB
 * which outputs a BGP peer providing a 'routing-instance' index reference which was never
 * implemented in production MIBs. 
 * 
 * output allows for direct query using base OID krtTableInstance + ASCII convertion of index_num [52.48.55.55]
 * ascii52 = 4, ascii48 = 0, ascii55 = 7, ascii55 = 7
 * jnxUtilStringValue."krtTableInstance:4077" = customer_vrf_4077
 * jnxUtilStringValue.107.114.116.84.97.98.108.101.73.110.115.116.97.110.99.101.32.52.48.55.55 = customer_vrf_4077
 *
 * NOTES
 * & cleanup of inserted entries for VRF deletes. Could optimize by leaving stale entries in the table
 *   rather than clearing, depending on if we're polling the timestamp also
 *      vSRX-D70.3> request snmp utility-mib clear object-type string instance krtTableInstance
 * & improved efficiency before MIB insertion (only unique krt-table keys)
 *      Complete : using set:distinct to avoid multiple MIB inserts for duplicate keys
 *               : use of jcs:execute vs jcs:invoke (single connection vs multiple for sets/deletes)
 * & run as commit / event / op script depending on need and restrictions (commit time sensitive, etc)
 * & Thanks to Chris Jenn for the running PID check / SNMPmib clear functions and the jcs:invoke vs jcs:execute optimization
 *
*/

version 1.1;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns ext = "http://xmlsoft.org/XSLT/namespace";
ns str = "http://exslt.org/strings";
/* You need include this ns to use set:distinct() */
ns set = "http://exslt.org/sets";
/* unique namespace used for PID checks function */
ns jutils = "http://jutils/";


import "../import/junos.xsl";


/* open a control connection as we assume we'll be updating some MIBs during this script run */
/* GLOBAL Scope */
var $connection = jcs:open();

match / {

    <op-script-results> {

        if( not( $connection )) {
            expr jcs:syslog( $SYSLOG, $APPNAME _ ":ERROR: unable to connect to Junos API");
            terminate;
        }
    
        call check_pid;
        
        /* show krt tables */
        var $command="get-krt-tables-information";
        var $krt-rpc = jcs:execute($connection, $command);

        /* if response is empty then exit and terminate */
        if (jcs:empty($krt-rpc)) {
                <xsl:message terminate="yes"> "Failure to read krt tables";
        }


        /* build RTF of table/index values */
        var $hash := {
            <krt-tables> {
                for-each ($krt-rpc//krt-table) {
                        /* split vrfname.inet.0 and only take the first part ref to routing-instance */
                        /* discard inet.0, inet.1 and whatnot since it's not interesting             */

                        var $short-table-name = jcs:split("\\.", krt-table-name[1]);
                        var $index = krt-table-index;
                        <entry index=$index> $short-table-name;
                }
            }
        }        

        /* krt has multiple tables for a given routing-instance      */
        /* we only want to set this once so we'll filter unique keys */
        var $uniq = set:distinct($hash/krt-tables/entry);

        /* clear the existing table prior to setting new values                              */
        /* not sure if this is necessary if we filter on timestamp but provides a clean view */
        /* for deleted routing-instances                                                     */
        call clear-all-mib;

        /* set some snmp variables */
        for-each ($hash/krt-tables/entry) {
            /* index = table-index , value = vrf_name */
            call snmp_set($index=@index, $value = .);
        }
    }
}



template check_pid {
    var $running_pid = jutils:running( $connection, $script );
    if ( $running_pid ) {
        <xsl:message terminate="yes"> "terminate script because another instance with pid " _ $running_pid _ " is still running";
    }
}

template snmp_set($index, $value, $type = "string" ) {

    var $set_rpc = <request-snmp-utility-mib-set> {
        <object-type> $type;
        <object-value> $value;
        <instance> "krtTableInstance" _ ":" _ $index;
    }
    var $out = jcs:execute($connection, $set_rpc);
    if ($out//xnm:error) {
        <xsl:message terminate="yes"> "Error setting Utility MIB instance: " _ $results/..//xnm:error/message;
    }    
}

template clear-all-mib () {
    var $rpc-walk-mib = <rpc> {
        /* jnxUtilStringValue.krtTableInstance: */
        /* request snmp utility-mib clear object-type string instance krtTableInstance */
        <command> "show snmp mib walk jnxUtilStringValue.107.114.116.84.97.98.108.101.73.110.115.116.97.110.99.101.58 ascii";
    }
    var $util-mib-set = jcs:execute($connection,$rpc-walk-mib);
    for-each ($util-mib-set//snmp-object) {
        call clear_util_mib($name=./index/index-value);
    }
}
 
template clear_util_mib($name) {
    var $clear-rpc = <request-snmp-utility-mib-clear> {
        <object-type> "string";
        <instance> $name;
    }
    var $out = jcs:execute($connection,$clear-rpc);
}

function jutils:file-exists( $filename ) {
  var $ls_file = <file-list> { <path> $filename; }
  var $ls_got = jcs:execute( $connection, $ls_file );
  var $retval = boolean( $ls_got//file-information );
  
  result $retval;
}

function jutils:running( $connection, $script ) {
    /* function to check if another instance of this script is still running
     *
     * :param connection: connection handle
     * :param script: name used to identify the script
     * :return: pid of running instance or false
     */
    mvar $running = false();
 
    var $pid = <pid> $junos-context/pid;
    var $pid_filename = "/mfs/var/tmp/" _ $script _ ".pid";
    
    /* pid_file won't exist on first run */
    var $pid_file = document( $pid_filename );
    
    if ( not( jcs:empty( $pid_file//pid ) ) ) {
        var $processes_rpc = { <command> "show system processes extensive"; }
        var $processes := jcs:execute( $connection, $processes_rpc );
        var $processes_lines = jcs:break-lines( $processes );
 
        for-each( $processes_lines ) {
            if ( jcs:regex( "^[[:blank:][:space:]]*" _ $pid_file//pid _ "[[:blank:][:space:]]+.*cscript.*", . )[1] ) {
                set $running = true();
            }
        }
    }
    if ( $running ) {
        result $pid_file//pid;
    } else {
        <xsl:document method="xml" href=$pid_filename append="no"> {
            copy-of $pid;
        }
        result false();
    }
}